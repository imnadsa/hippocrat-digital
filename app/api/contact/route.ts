// app/api/contact/route.ts
import { NextRequest, NextResponse } from 'next/server'

// –¢–∏–ø—ã –¥–ª—è —Ñ–æ—Ä–º
interface CTAFormData {
  name: string
  contact: string
  service?: string
  message?: string
}

interface ContactFormData {
  name: string
  email: string
  phone: string
  clinic?: string
  message?: string
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    console.log('API called with data:', body)

    // –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID

    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
      console.error('Missing Telegram credentials')
      return NextResponse.json(
        { success: false, message: 'Server configuration error' },
        { status: 500 }
      )
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ä–º—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let telegramMessage = ''
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä–º–∞ –∏–∑ CTA —Å–µ–∫—Ü–∏–∏ (–µ—Å—Ç—å –ø–æ–ª–µ contact)
    if (body.contact) {
      const { name, contact, service, message }: CTAFormData = body
      
      telegramMessage = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ö–ü —Å Hippocrat Digital</b>

üë§ <b>–ò–º—è:</b> ${name}
üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${contact}
üõ† <b>–£—Å–ª—É–≥–∞:</b> ${service || '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìÖ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      })} (–ú–°–ö)
      `.trim()
    } 
    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ (–µ—Å—Ç—å –ø–æ–ª—è email, phone)
    else if (body.email && body.phone) {
      const { name, email, phone, clinic, message }: ContactFormData = body
      
      telegramMessage = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ Hippocrat Digital</b>

üë§ <b>–ò–º—è:</b> ${name}
üìß <b>Email:</b> ${email}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
üè• <b>–ö–ª–∏–Ω–∏–∫–∞:</b> ${clinic || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìÖ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      })} (–ú–°–ö)
      `.trim()
    }
    // –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    else {
      console.error('Unknown form data structure:', body)
      return NextResponse.json(
        { success: false, message: 'Invalid form data' },
        { status: 400 }
      )
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    console.log('Sending to Telegram...')
    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: telegramMessage,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                { text: "‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ", callback_data: "replied" },
                { text: "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data: "call" }
              ]
            ]
          }
        }),
      }
    )

    console.log('Telegram response status:', telegramResponse.status)

    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.text()
      console.error('Telegram API error:', errorData)
      return NextResponse.json(
        { success: false, message: 'Telegram API error: ' + errorData },
        { status: 500 }
      )
    }

    console.log('Message sent successfully!')
    return NextResponse.json(
      { success: true, message: 'Message sent successfully' },
      { status: 200 }
    )

  } catch (error) {
    console.error('Contact form error:', error)
    return NextResponse.json(
      { success: false, message: 'Server error: ' + (error instanceof Error ? error.message : 'Unknown error') },
      { status: 500 }
    )
  }
}
